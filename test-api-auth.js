const axios = require('axios');

// Test configuration
const BASE_URL = 'https://chat-294cc.cloudfunctions.net/okxChainAI';
const TEST_USER_ID = 'test_user_' + Date.now();

// Test API key (this would be generated by the system)
let testApiKey = null;

// Test functions
async function testAPIKeyGeneration() {
  console.log('🔑 Testing API Key Generation...');
  
  try {
    const response = await axios.post(`${BASE_URL}/api/keys/generate`, {
      userId: TEST_USER_ID,
      plan: 'BASIC',
      description: 'Test API key for authentication testing'
    });
    
    if (response.data.success) {
      testApiKey = response.data.apiKey;
      console.log('✅ API key generated successfully:', testApiKey);
      console.log('📊 Plan details:', response.data.limits);
      return true;
    } else {
      console.log('❌ Failed to generate API key');
      return false;
    }
  } catch (error) {
    console.error('❌ API key generation error:', error.response?.data || error.message);
    return false;
  }
}

async function testAPIKeyInfo() {
  console.log('\n📋 Testing API Key Info Retrieval...');
  
  if (!testApiKey) {
    console.log('❌ No API key available for testing');
    return false;
  }
  
  try {
    const response = await axios.get(`${BASE_URL}/api/keys/${testApiKey}`);
    
    console.log('✅ API key info retrieved successfully');
    console.log('👤 User ID:', response.data.userId);
    console.log('📊 Plan:', response.data.plan);
    console.log('📈 Current usage:', response.data.currentUsage);
    return true;
  } catch (error) {
    console.error('❌ API key info retrieval error:', error.response?.data || error.message);
    return false;
  }
}

async function testAvailablePlans() {
  console.log('\n💳 Testing Available Plans...');
  
  try {
    const response = await axios.get(`${BASE_URL}/api/plans`);
    
    console.log('✅ Available plans retrieved successfully');
    console.log('📊 Plans:', JSON.stringify(response.data.plans, null, 2));
    return true;
  } catch (error) {
    console.error('❌ Plans retrieval error:', error.response?.data || error.message);
    return false;
  }
}

async function testAuthenticatedAPI() {
  console.log('\n🔐 Testing Authenticated API Endpoints...');
  
  if (!testApiKey) {
    console.log('❌ No API key available for testing');
    return false;
  }
  
  const headers = {
    'X-API-Key': testApiKey,
    'Content-Type': 'application/json'
  };
  
  // Test token analysis with authentication
  try {
    console.log('🧪 Testing token analysis with authentication...');
    const response = await axios.post(`${BASE_URL}/api/token/analyze`, {
      contractAddress: '0x1234567890abcdef1234567890abcdef12345678'
    }, { headers });
    
    console.log('✅ Token analysis with authentication successful');
    console.log('📊 Response status:', response.status);
    return true;
  } catch (error) {
    if (error.response?.status === 400) {
      console.log('✅ Authentication successful (400 error expected for invalid address)');
      return true;
    } else {
      console.error('❌ Token analysis with authentication failed:', error.response?.data || error.message);
      return false;
    }
  }
}

async function testUnauthenticatedAPI() {
  console.log('\n🚫 Testing Unauthenticated API Access...');
  
  try {
    const response = await axios.post(`${BASE_URL}/api/token/analyze`, {
      contractAddress: '0x1234567890abcdef1234567890abcdef12345678'
    });
    
    console.log('❌ API should have required authentication');
    return false;
  } catch (error) {
    if (error.response?.status === 401) {
      console.log('✅ Unauthenticated access properly blocked (401)');
      console.log('📝 Error message:', error.response.data.message);
      return true;
    } else {
      console.error('❌ Unexpected error for unauthenticated access:', error.response?.data || error.message);
      return false;
    }
  }
}

async function testUsageTracking() {
  console.log('\n📊 Testing Usage Tracking...');
  
  if (!testApiKey) {
    console.log('❌ No API key available for testing');
    return false;
  }
  
  try {
    // Wait a moment for usage to be tracked
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const response = await axios.get(`${BASE_URL}/api/usage/${TEST_USER_ID}`);
    
    console.log('✅ Usage tracking working');
    console.log('📈 Total usage count:', response.data.count);
    console.log('💰 Total cost:', response.data.totalCost);
    return true;
  } catch (error) {
    console.error('❌ Usage tracking error:', error.response?.data || error.message);
    return false;
  }
}

async function testInvalidAPIKey() {
  console.log('\n🔒 Testing Invalid API Key...');
  
  const invalidHeaders = {
    'X-API-Key': 'invalid_key_123',
    'Content-Type': 'application/json'
  };
  
  try {
    const response = await axios.post(`${BASE_URL}/api/token/analyze`, {
      contractAddress: '0x1234567890abcdef1234567890abcdef12345678'
    }, { headers: invalidHeaders });
    
    console.log('❌ Invalid API key should have been rejected');
    return false;
  } catch (error) {
    if (error.response?.status === 401) {
      console.log('✅ Invalid API key properly rejected (401)');
      console.log('📝 Error message:', error.response.data.message);
      return true;
    } else {
      console.error('❌ Unexpected error for invalid API key:', error.response?.data || error.message);
      return false;
    }
  }
}

// Main test runner
async function runAllTests() {
  console.log('🚀 Starting API Authentication System Tests...\n');
  
  const tests = [
    { name: 'API Key Generation', fn: testAPIKeyGeneration },
    { name: 'API Key Info', fn: testAPIKeyInfo },
    { name: 'Available Plans', fn: testAvailablePlans },
    { name: 'Authenticated API Access', fn: testAuthenticatedAPI },
    { name: 'Unauthenticated API Access', fn: testUnauthenticatedAPI },
    { name: 'Usage Tracking', fn: testUsageTracking },
    { name: 'Invalid API Key Rejection', fn: testInvalidAPIKey }
  ];
  
  let passedTests = 0;
  let totalTests = tests.length;
  
  for (const test of tests) {
    try {
      const result = await test.fn();
      if (result) {
        passedTests++;
      }
    } catch (error) {
      console.error(`❌ Test "${test.name}" failed with error:`, error.message);
    }
  }
  
  console.log('\n' + '='.repeat(50));
  console.log('📊 TEST RESULTS SUMMARY');
  console.log('='.repeat(50));
  console.log(`✅ Passed: ${passedTests}/${totalTests}`);
  console.log(`❌ Failed: ${totalTests - passedTests}/${totalTests}`);
  console.log(`📈 Success Rate: ${((passedTests / totalTests) * 100).toFixed(1)}%`);
  
  if (passedTests === totalTests) {
    console.log('\n🎉 All tests passed! API authentication system is working correctly.');
  } else {
    console.log('\n⚠️  Some tests failed. Please check the implementation.');
  }
  
  if (testApiKey) {
    console.log(`\n🔑 Test API Key: ${testApiKey}`);
    console.log(`👤 Test User ID: ${TEST_USER_ID}`);
    console.log('💡 You can use these credentials for further testing.');
  }
}

// Run tests if this file is executed directly
if (require.main === module) {
  runAllTests().catch(console.error);
}

module.exports = {
  testAPIKeyGeneration,
  testAPIKeyInfo,
  testAvailablePlans,
  testAuthenticatedAPI,
  testUnauthenticatedAPI,
  testUsageTracking,
  testInvalidAPIKey,
  runAllTests
};
